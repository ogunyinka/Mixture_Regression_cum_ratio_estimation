#r code for General Univariate Mean Estimators using mixture multi-auxiliary characters in Regression-cum-ratio estimation in two-phase sampling
#====================================================
#function starts here
Mixture_RRP <- function (NN, NN_step, pop_total, analysis_result_console, save_analysis_result, save_data_file, corr_matrix_console, save_corr_matrix_file) {

#Population size (NN) and step to make up for 16 populations will be supplied by the user

for (i in c(1: pop_total )) {

#Set the first and second phase sample sizes
n1 <- round(NN/3)
n2 <- round(n1/3)
seed.value <- abs(round(rnorm(1,sd=300)))

#Generate population data of Variable
#===For Regression Estimator===
set.seed(seed.value +4)
#X1 <- 1:NN + rnorm(NN,45, 3)
X1 <- rnorm(NN,25, 10)

set.seed(seed.value +14)
#X2 <- 1:NN/4 + rnorm(NN,40, 2)
X2 <- rnorm(NN,40, 2)

set.seed(seed.value +24)
#X3 <- 1:NN/3 + rnorm(NN,35, 4)
X3 <- rnorm(NN,35, 4)

set.seed(seed.value +34)
#X4 <- 1:NN/2 + rnorm(NN,30, 5)
X4 <- rnorm(NN,30, 5)

set.seed(seed.value +44)
#X5 <- 1:NN/5 + rnorm(NN,25, 7)
X5 <- rnorm(NN,25, 7)

#===For Ratio Estimator===
set.seed(seed.value +54)
#X6 <- 1:NN + rnorm(NN,45, 8)
X6 <- rnorm(NN,45, 8)

set.seed(seed.value +64)
#X7 <- 1:NN/4 + rnorm(NN,40, 9)
X7 <- rnorm(NN,40, 9)

set.seed(seed.value +74)
#X8 <- 1:NN/3 + rnorm(NN,35, 10)
X8 <- rnorm(NN,35, 10)

set.seed(seed.value +84)
#X9 <- 1:NN/2 + rnorm(NN,30, 11)
X9 <- rnorm(NN,30, 11)

set.seed(seed.value +94)
#X10 <- 1:NN/5 + rnorm(NN,25, 12)
X10 <- rnorm(NN,25, 12)



#Sample the 1st phase sample of n1 for Variable
#===For Regression Estimator===
set.seed(seed.value +2)
x11 <- sample(X1, n1)
set.seed(seed.value +22)
x12 <- sample(X2, n1)
set.seed(seed.value +32)
x13 <- sample(X3, n1)
set.seed(seed.value +12)
x14 <- sample(X4, n1)
set.seed(seed.value +42)
x15 <- sample(X5, n1)
#===For Ratio Estimator===
set.seed(seed.value +52)
x16 <- sample(X6, n1)
set.seed(seed.value +62)
x17 <- sample(X7, n1)
set.seed(seed.value +72)
x18 <- sample(X8, n1)
set.seed(seed.value +82)
x19 <- sample(X9, n1)
set.seed(seed.value +92)
x110 <- sample(X10, n1)


#Sample the 2nd phase sample of n2 for Variable
#===For Regression Estimator===
set.seed(seed.value +50)
#x21 <- 1:n2 + rnorm(n2,45, 10)
#x21 <- round(rnorm(n2,45, 20))
x21 <- round(rnorm(n2, 15, 20))

set.seed(seed.value + 10)
#x22 <- 1:n2/4 + rnorm(n2,100, 8)
x22 <- round(rnorm(n2, 70, 10))

set.seed(seed.value + 2)
#x23 <- 1:n2/3 + rnorm(n2,55, 15)
x23 <- round(rnorm(n2, 59, 12))

set.seed(seed.value + 15)
#x24 <- 1:n2/2 + rnorm(n2,80, 5)
x24 <- round(rnorm(n2, 63, 7))

set.seed(seed.value + 9)
#x25 <- 1:n2/5 + rnorm(n2,25, 7)
x25 <- round(rnorm(n2, 59, 9))

#===For Ratio Estimator===
set.seed(seed.value + 1)
#x26 <- 1:n2 + rnorm(n2,45, 10)
x26 <- round(rnorm(n2,45, 10))

set.seed(seed.value + 11)
#x27 <- 1:n2/4 + rnorm(n2,100, 8)
x27 <- round(rnorm(n2,100, 8))

set.seed(seed.value + 12)
#x28 <- 1:n2/3 + rnorm(n2,55, 13)
x28 <- round(rnorm(n2,55, 13))

set.seed(seed.value + 13)
#x29 <- 1:n2/2 + rnorm(n2,80, 12)
x29 <- round(rnorm(n2,80, 12))

set.seed(seed.value + 14)
#x210 <- 1:n2/5 + rnorm(n2,25, 11)
x210 <- round(rnorm(n2,25, 11))


#Generate population data for Attributes
#===For Regression Estimator===
set.seed(seed.value +2)
T1 <- rbinom(NN, 1, 0.05)
set.seed(seed.value +20)
T2 <- rbinom(NN, 1, 0.15)
set.seed(seed.value +32)
T3 <- rbinom(NN, 1, 0.25)
set.seed(seed.value +42)
T4 <- rbinom(NN, 1, 0.35)
set.seed(seed.value +19)
T5 <- rbinom(NN, 1, 0.45)
#===For Ratio Estimator===
set.seed(seed.value +29)
T6 <- rbinom(NN, 1, 0.55)
set.seed(seed.value +39)
T7 <- rbinom(NN, 1, 0.65)
set.seed(seed.value +59)
T8 <- rbinom(NN, 1, 0.22)
set.seed(seed.value +69)
T9 <- rbinom(NN, 1, 0.85)
set.seed(seed.value +79)
T10 <- rbinom(NN, 1, 0.09)


#Sample the 1st phase sample of n1 for Attributes
#===For Regression Estimator===
set.seed(seed.value+23)
t11 <- sample(T1, n1)
set.seed(seed.value+12)
t12 <- sample(T2, n1)
set.seed(seed.value+32)
t13 <- sample(T3, n1)
set.seed(seed.value+42)
t14 <- sample(T4, n1)
set.seed(seed.value+25)
t15 <- sample(T5, n1)
#===For Ratio Estimator===
set.seed(seed.value+19)
t16 <- sample(T6, n1)
set.seed(seed.value+39)
t17 <- sample(T7, n1)
set.seed(seed.value+33)
t18 <- sample(T8, n1)
set.seed(seed.value+45)
t19 <- sample(T9, n1)
set.seed(seed.value+52)
t110 <- sample(T10, n1)


#Sample the 2nd phase sample of n2 for Attributes
#===For Regression Estimator===
set.seed(seed.value +11)
t21 <- rbinom(n2, 1, 0.11)
set.seed(seed.value +33)
t22 <- rbinom(n2, 1, 0.12)
set.seed(seed.value +49)
t23 <- rbinom(n2, 1, 0.55)
set.seed(seed.value +121)
t24 <- rbinom(n2, 1, 0.25)
set.seed(seed.value +114)
t25 <- rbinom(n2, 1, 0.29)
#===For Ratio Estimator===
set.seed(seed.value+31)
t26 <- rbinom(n2, 1, 0.1)
set.seed(seed.value+23)
t27 <- rbinom(n2, 1, 0.92)
set.seed(seed.value+29)
t28 <- rbinom(n2, 1, 0.75)
set.seed(seed.value+12)
t29 <- rbinom(n2, 1, 0.55)
set.seed(seed.value+14)
t210 <- rbinom(n2, 1, 0.21)

#Compute for Y population data
set.seed(seed.value)
#YY <- (X2/2) + (X1*(T1+T2+T3+T4+T5)/5) + ((T1+T2+T3+T4+T5)/3) + rnorm(NN,sd=4) + rbinom(NN, 1, 0.05)
#YY <- (X1*(X1+X2+X3+X4+X5+X6+X7+X8+X9+X10)/5) + ((T1+T2+T3+T4+T5+T6+T7+T8+T9+T10)/3) + rnorm(NN,sd=4)
YY <- round((T1/2) + ((X1+X2+X3+X4+X5+X6+X7+X8+X9+X10)*(T1+T2+T3+T4+T5+T6+T7+T8+T9+T10)/5) + rnorm(NN, 30, 4) + rbinom(NN, 1, 0.95))
#YY <- rnorm(NN, 15, 35)
set.seed(seed.value+35)
# good 
#yy <- round((t21/2) + (x21 *(t21+t22+t23+t24+t25)/5) + rnorm(n2,sd=4) + rbinom(n2, 1, 0.05))
# very good  
yy <- round((t21/2) + ((x21+x22+x23+x24+x25+x26+x27+x28+x29+x210)*(t21+t22+t23+t24+t25+t26+t27+t28+t29+t210)/5) + rnorm(n2, 30, 4) + rbinom(n2, 1, 0.95))
#yy <- round((t21/2) + ((x21+x22+x23+x24+x25)) + rnorm(n2,sd=4) + rbinom(n2, 1, 0.05))
#yy <- round(rnorm(n2,35, 20), digit=4)
#yy <- sample(YY, n2)

#Data frame for all variables and attributes at the 2nd phase
df_xt <- data.frame(yy, x21, x22, x23, x24, x25,x27, x28, x29, x210, t21, t22, t23, t24, t25, t26, t27, t28, t29, t210)

#computation of correlation coefficient of all the data at the second phase
cor_xt <- cor(df_xt, method = "pearson")

cor_x1 <- round(cor(yy, x21, method = "pearson"), digit=4)
cor_x2 <- round(cor(yy, x22, method = "pearson"), digit=4)
cor_x3 <- round(cor(yy, x23, method = "pearson"), digit=4)
cor_x4 <- round(cor(yy, x24, method = "pearson"), digit=4)
cor_x5 <- round(cor(yy, x25, method = "pearson"), digit=4)
cor_x6 <- round(cor(yy, x26, method = "pearson"), digit=4)
cor_x7 <- round(cor(yy, x27, method = "pearson"), digit=4)
cor_x8 <- round(cor(yy, x28, method = "pearson"), digit=4)
cor_x9 <- round(cor(yy, x29, method = "pearson"), digit=4)
cor_x10 <- round(cor(yy, x210, method = "pearson"), digit=4)


cor_t1 <- round(cor(yy, t21, method = "pearson"), digit=4)
cor_t2 <- round(cor(yy, t22, method = "pearson"), digit=4)
cor_t3 <- round(cor(yy, t23, method = "pearson"), digit=4)
cor_t4 <- round(cor(yy, t24, method = "pearson"), digit=4)
cor_t5 <- round(cor(yy, t25, method = "pearson"), digit=4)
cor_t6 <- round(cor(yy, t26, method = "pearson"), digit=4)
cor_t7 <- round(cor(yy, t27, method = "pearson"), digit=4)
cor_t8 <- round(cor(yy, t28, method = "pearson"), digit=4)
cor_t9 <- round(cor(yy, t29, method = "pearson"), digit=4)
cor_t10 <- round(cor(yy, t210, method = "pearson"), digit=4)



#Population mean of Y square
Y_bar <- round(mean(yy), digits=4)
Y_bar_2 <- (mean(yy))^2

#Population Coefficient of variation of Y square
Y_CV <- round(sd(yy)/Y_bar, digits=4)
Y_CV_2 <- (sd(yy)/Y_bar)^2

#Computation of titas
tita_1 <- round((1/n1)-(1/NN), digits=4)
tita_2 <- round((1/n2)-(1/NN), digits=4)

#Computation of the square of the Multiple Correlation Coefficients (MCC)
#================================================
#MCC for only all auxiliary variables (x's) on  the study variable (Y)
MCC_x1 <- summary(lm(yy ~ x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x210))
MCC_x1_2 <- round(MCC_x1$r.squared, digits=4)

#MCC for only all auxiliary attributes (t's) on  the study variable (Y)
MCC_t1 <- summary(lm(yy ~ t21 + t22 + t23 + t24 + t25 + t26 + t27 + t28 + t29 + t210))
MCC_t1_2 <- round(MCC_t1$r.squared, digits=4)
#================================================
#MCC for all auxiliary variables (x's) and attributes (t's) on  the study variable (Y)
MCC_txb <- summary(lm(yy ~ x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x210 + t21 + t22 + t23 + t24 + t25 + t26 + t27 + t28 + t29 + t210))
MCC_txb_2 <- round(MCC_txb$r.squared, digits=4)

#MCC for auxiliary variables r and attributes t on  the study variable (Y)
MCC_tx1 <- summary(lm(yy ~ x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + t21 + t22 + t23 + t24 + t25 + t26 + t27 + t28))
#MCC_tx1 <- summary(lm(yy ~ x21 + x22 + x23 + x24 + x25 + x27 + x28 + t21 + t22 + t23 + t24 + t25 + t27 + t28))
MCC_tx1_2 <- round(MCC_tx1$r.squared, digits=4)

#MCC for auxiliary variables (b - g) and attributes (b - q) on  the study variable (Y)
MCC_tx2 <- summary(lm(yy ~ x21 + x22 + x23 + x26 + x27 + x28 + x29 + x210 + t21 + t22 + t23 + t26 + t27 + t28 + t29 + t210))
#MCC_tx2 <- summary(lm(yy ~ x21 + x22 + x26 + x27 + x28 + x29 + x210 + t21 + t22 + t26 + t27 + t28 + t29 + t210))
MCC_tx2_2 <- round(MCC_tx2$r.squared, digits=4)

#MCC for all auxiliary variables (x's) and some attributes (1,2 and 3) on  the study variable (Y)
MCC_tx3 <- summary(lm(yy ~ x21 + x22 + x23 + x26 + x27 + x28 + t21 + t22 + t23 + t26 + t27 + t28))
#MCC_tx3 <- summary(lm(yy ~ x21 + x22 + x27 + x28 + t21 + t22+ t27 + t28))
MCC_tx3_2 <- round(MCC_tx3$r.squared, digits=4)

#================================================


#Computation of MSE for FIC
MSE_FIC <- round(tita_2 * Y_bar_2 * Y_CV_2 * (1 - MCC_txb_2), digits=7)

#Computation of MSE for NIC
MSE_NIC <- round( (Y_bar_2 * Y_CV_2)*((tita_2 * (1 - MCC_txb_2))+(tita_1 * MCC_txb_2) ) , digits=7)

#Computation of MSE for PIC-I
MSE_PIC1 <- round( (Y_bar_2 * Y_CV_2)*((tita_2 * (1 - MCC_txb_2))+(tita_1 *( MCC_txb_2 - MCC_tx1_2))), digits=7)

#Computation of MSE for PIC-II
MSE_PIC2 <- round( (Y_bar_2 * Y_CV_2)*((tita_2 * (1 - MCC_txb_2))+(tita_1 *( MCC_txb_2 - MCC_tx2_2))) , digits=7)

#Computation of MSE for PIC-III
MSE_PIC3 <- round( (Y_bar_2 * Y_CV_2)*((tita_2 * (1 - MCC_txb_2))+(tita_1 *( MCC_txb_2 - MCC_tx3_2))) , digits=7)

df_result <- data.frame (

#print(paste ("===== Operation", i) ),

S_no = c(1:10),

Cor_yx = c(" Cor_yx1", " Cor_yx2", " Cor_yx3" ," Cor_yx4"," Cor_yx5"," Cor_yx6"," Cor_yx7"," Cor_yx8"," Cor_yx9"," Cor_yx10"),
CC_Val= c(cor_x1, cor_x2, cor_x3, cor_x4, cor_x5, cor_x6, cor_x7, cor_x8, cor_x9, cor_x10),

CC_yt = c(" Cor_yt1", " Cor_yt2", " Cor_yt3" ," Cor_yt4"," Cor_yt5"," Cor_yt6"," Cor_yt7"," Cor_yt8"," Cor_yt9"," Cor_yt10"),
CC_Val= c(cor_t1, cor_t2, cor_t3, cor_t4, cor_t5, cor_t6, cor_t7, cor_t8, cor_t9, cor_t10),

Info_Case = c("   FIC", "  PIC-I", "  PIC-II" ,"  PIC-III","  NIC","  ___","  ___","  ___","  ___", "  ___"),
MSE= c(MSE_FIC, MSE_PIC1, MSE_PIC2, MSE_PIC3, MSE_NIC, " ", " ", " ", " ", " "),

size = c("  Population", "   1st Phase", "   2nd Phase", "   Seed Value", "Pop. Mean(Y)2", "Varia. Coeff.(Y)2", "   Theta(1)", "   Theta(2)", " ", " "),
size = c(NN, n1, n2, seed.value, round(Y_bar_2, digits=4), round(Y_CV_2, digits=4), round(tita_1, digits=4), round(tita_2, digits=4), " ", " "),

MCC_tx = c("MCCFIC", "MCCPIC1", "MCCPIC2", "MCCPIC3","  ","   ","   ", "   ", "  ","=========="),
MCC_tx_val = c(round(MCC_txb_2, digits=4), round(MCC_tx1_2, digits=4), round(MCC_tx2_2, digits=4), round(MCC_tx3_2, digits=4), "   ", "  ", "  ", "  "," ", " "),

stringsAsFactors = FALSE
)

#=======#This will write the Analysis results into a CSV and saves the CSV file into the R default directory "MY DOCUMENT" =========================
if (save_analysis_result == 1) {
csvfile <- paste ("analysis_result",i,".csv")
write.csv(df_result, file=csvfile, append = TRUE, fileEncoding = "UTF-16LE")
}
else {
print(paste ("You did not request to save the analysis result into CSV file for operation ", i) )
}
#=======End: This will Save the data to a CSV file =========================


#=======Begin: This will Save the data to a CSV file and saves the CSV file into the R default directory "MY DOCUMENT" =========================
if (save_data_file == 1) {
data_csvfile <- paste ("data_file",i,".csv")
write.csv(df_xt, file=data_csvfile, append = TRUE, fileEncoding = "UTF-16LE")
}
else {
print(paste ("You did not request to save the data into CSV file for operation ", i) )
}
#=======End: This will Save the data to a CSV file =========================

#=======Begin: #This prints the results on the R Console environ =========================
if (analysis_result_console == 1) {
print(df_result)
}
else {
print(paste ("You did not request to print the result on the R console for operation ", i) )
}
#=======End: #This prints the results on the R Console environ =========================

#=======Begin: #This prints the results of the correlation coefficient on the R Console environ =========================
if (corr_matrix_console == 1) {
print(cor_xt)

}
else {
print(paste ("You did not request to print the correlation matrix on the R console for operation ", i) )
}
#=======End: #This prints the results of the correlation coefficient on the R Console environ =========================

#=======Begin: This will Save the data to a Correlation Matrix file and saves the CSV file into the R default directory "MY DOCUMENT" =========================
if (save_corr_matrix_file == 1) {
correlation_csvfile <- paste ("correlation_file",i,".csv")
write.csv(cor_xt, file=correlation_csvfile, append = TRUE, fileEncoding = "UTF-16LE")
}
else {
print(paste ("You did not request to save the data into CSV file for operation ", i) )
}
#=======End: This will Save the data to a CSV file =========================



#NN and NN_step have been set in the input parameter.
NN = NN - NN_step

}

}

#NN			
#NN_step		
#pop_total		
#analysis_result_console: 
#save_analysis_result	
#save_data_file	
#corr_matrix_console		
#save_corr_matrix_file	


Mixture_RRP(NN=10000, NN_step=350, pop_total=35, analysis_result_console=1, save_analysis_result=1, save_data_file=1, corr_matrix_console=0, save_corr_matrix_file=1)
